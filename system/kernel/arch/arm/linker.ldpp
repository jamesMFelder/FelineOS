/* SPDX-License-Identifier: MIT */
/* Copyright (c) 2023 James McNaughton Felder */
/* The bootloader will look at this image and start execution at the symbol
   designated at the entry point. */
ENTRY(_start)

/* Don't try to understand functions. */
#define __ASSEMBLER__
#include <kernel/vtopmem.h>

/* Tell where the various sections of the object files will be put in the final
   kernel image. */
SECTIONS
{
	/* Begin putting sections at 32KiB, where the Raspberry Pi 1B+ loads it */
	. = 0x8000;

	/* Where we need to set up the initial identity map from. */
	identity_map_from_here = .;

	.startup.text : ALIGN(4K)
	{
		*(.startup.text)
	}

	. += VA_OFFSET;

	/* Align the main kernel so that paging works. */
	. = ALIGN(4K);

	/* Where we will think the kernel starts once paging is turned on. */
	kernel_start = .;
	/*Where the kernel starts (what we care abuot after turning paging on).*/
	phys_kernel_start = . - VA_OFFSET;

	.text ALIGN(4K) : AT (ADDR(.text) - VA_OFFSET)
	{
		*(.text*)
	}

	/* Read-only data. */
	.rodata ALIGN(4K) : AT (ADDR(.rodata) - VA_OFFSET)
	{
		*(.rodata*)
	}

	/* Read-write data (initialized) */
	.data ALIGN(4K) : AT (ADDR(.data) - VA_OFFSET)
	{
		*(.data*)
	}

	.ARM.exidx ALIGN(4) : AT (ADDR(.ARM.exidx) - VA_OFFSET)
	{
		__exidx_start = .;
		*(.eh_frame)
		*(.ARM.exidx*)
		QUAD(0)
		__exidx_end = .;
	}

	/* Read-write data (uninitialized) and stack */
	.bss ALIGN(4K) : AT (ADDR(.bss) - VA_OFFSET)
	{
		bss_start = .;
		*(COMMON)
		*(.bss*)
		bss_end = .;
	}

	/*Where the kernel ends.*/
	kernel_end = .;
	phys_kernel_end = . - VA_OFFSET;

	/* The compiler may produce other sections, put them in the proper place in
	   in this file, if you'd like to include them in the final kernel. */
}
